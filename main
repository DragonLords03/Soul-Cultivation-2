--loadstring(game:HttpGet("https://raw.githubusercontent.com/DragonLords03/Soul-Cultivation-2/main/main"))()

local bb = game:GetService("VirtualUser")
local players = game:GetService("Players")
local localPlayer = players.LocalPlayer

players.LocalPlayer.Idled:Connect(function()
    bb:CaptureController()
    bb:ClickButton2(Vector2.new())
    print("Anti AFK: Prevented kick due to inactivity.")
end)

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local ui = Library:NewWindow("Soul Cultivation")
local ui2 = Library:NewWindow("Soul Cultivation")
local b = ui:NewSection("Farm")
local d = ui:NewSection("Training")
local c = ui:NewSection("Brew")
local a = ui2:NewSection("Herbs")

local function createFarmFunction(herbType)
    return function()
        while _G["Auto_Farm_" .. herbType] do
            local herbFolder = game:GetService("Workspace").Herbs[herbType]
            for _, herb in pairs(herbFolder:GetChildren()) do
                if not _G["Auto_Farm_" .. herbType] then return end
                local herbPart = herb:FindFirstChild("HerbZone")
                if herbPart then
                    localPlayer.Character.HumanoidRootPart.CFrame = herbPart.CFrame
                    task.wait(0.7)
                    game:GetService("ReplicatedStorage").RemoteEvents.Harvest:FireServer()
                    task.wait(_G["WaitTime_" .. herbType] or 1)
                end
            end
            task.wait(0.1)
        end
    end
end

local function groupEnemiesByName()
    local enemies = game:GetService("Workspace").Enemies:GetChildren()
    local groupedEnemies = {}

    for _, enemy in pairs(enemies) do
        local enemyName = enemy.Name
        if not groupedEnemies[enemyName] then
            groupedEnemies[enemyName] = {}
        end
        table.insert(groupedEnemies[enemyName], enemy)
    end

    return groupedEnemies
end

local enemyToNpcMap = {
    Commoner = "Xi Hao",
    Bandit = "Bei Fang",
    ["Female Blood Cultivator"] = "Yang Wei",
    ["Furious Sect Member"] = "Taoist Xi",
    ["Male Assassin"] = "Sun Tao",
    ["Sect Master"] = "Gao Xiang",
    ["Male Blood Cultivator"] = "Tong Li",
    ["Bao Laohu"] = "Wu Hao",
    ["Corrupt Commoner"] = "Xia Hui",
    ["Corrupt Minion"] = "Zhing Xiu",
    ["Corrupt Admiral"] = "Xian Ling",
    ["Mount Hua Leader"] = "Yang Zhu"
}

local function grindEnemies(enemyType)
    local npcName = enemyToNpcMap[enemyType]
    if not npcName then
        print("No NPC mapped for enemy type: " .. enemyType)
        return
    end
    
    while _G.Auto_Grind and selectedEnemyType == enemyType do
        local enemies = game:GetService("Workspace").Enemies:GetChildren()
        for _, enemy in ipairs(enemies) do
            if not _G.Auto_Grind or selectedEnemyType ~= enemyType then return end
            if enemy.Name == enemyType then
                local humanoidRootPart = enemy:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart then
                    local questArgs = { npcName }
                    game:GetService("ReplicatedStorage").RemoteFunctions.Quest:InvokeServer(unpack(questArgs))
                    
                    localPlayer.Character.HumanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, -3, 0)
                    task.wait(0.25)
                    local args = {
                        [1] = "Light",
                        [2] = {
                            ["RootPart"] = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                        }
                    }
                    game:GetService("ReplicatedStorage").RemoteEvents.Attack:FireServer(unpack(args))
                    task.wait(0.5)
                    local questArgs = { npcName }
                    game:GetService("ReplicatedStorage").RemoteFunctions.Quest:InvokeServer(unpack(questArgs))
                end
            end
        end
        task.wait(0.1)
    end
end

local groupedEnemies = groupEnemiesByName()
local enemyNames = {}
for enemyName, _ in pairs(groupedEnemies) do
    table.insert(enemyNames, enemyName)
end

local herbs = {
    "Spirit Grass",
    "Lingzhi",
    "Ginseng",
    "Moonlight Flowers",
    "Yin Bush",
    "Yang Flower",
    "Blood Flowers",
    "Qilin Berries",
    "Taixian",
    "Twilight Bloom"
}

for _, herb in ipairs(herbs) do
    local herbName = herb
    _G["Auto_Farm_" .. herbName] = false
    _G["WaitTime_" .. herbName] = 1
    _G["Farm_" .. herbName] = createFarmFunction(herbName)
    
    a:CreateToggle("Farm " .. herbName, function(value)
        _G["Auto_Farm_" .. herbName] = value
        if value then
            task.spawn(_G["Farm_" .. herbName])
        end
    end)
    
    a:CreateTextbox("Wait Time for " .. herbName, function(text)
        local waitTime = tonumber(text)
        if waitTime then
            _G["WaitTime_" .. herbName] = waitTime
            print("Set wait time for " .. herbName .. " to " .. waitTime .. " seconds")
        else
            print("Invalid wait time for " .. herbName)
        end
    end)
end

local function Brew()
    while _G.Auto_brew do
        local args = {
            [1] = {
                [1] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Hundred"
                },
                [2] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Hundred"
                },
                [3] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Thousand"
                },
                [4] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Ten Thousand"
                }
            }
        }
        game:GetService("ReplicatedStorage").RemoteFunctions.Concoct:InvokeServer(unpack(args))
        task.wait(3)
    end
end
local function Brew2()
    while _G.Auto_brew2 do
        local args = {
            [1] = {
                [1] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Ten"
                },
                [2] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Hundred"
                },
                [3] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Hundred"
                },
                [4] = {
                    ["Name"] = "Ginseng",
                    ["Variation"] = "Thousand"
                }
            }
        }
        game:GetService("ReplicatedStorage").RemoteFunctions.Concoct:InvokeServer(unpack(args))
        task.wait(3)
    end
end

local function Restore()
    local timesToRun = _G["Restore_Times"] or 1
    for i = 1, timesToRun do
        if not _G.Auto_Restore then return end
        task.wait(99)
        local args = {
            [1] = "Use",
            [2] = 1,
            [3] = "Restoration Pill",
            [4] = "Low",
            [5] = "IT. 1"
        }
        game:GetService("ReplicatedStorage").RemoteEvents.Item:FireServer(unpack(args))
    end
    _G.Auto_Restore = false
end

local function Breaktrhough_training()
    local args = {[1] = "Body Refining",[2] = true}
    game:GetService("ReplicatedStorage").RemoteFunctions.CastAbility:InvokeServer(unpack(args))
    task.wait(0.5)
    local args = {[1] = "Use",[2] = 1,[3] = "Restoration Pill",[4] = "Low",[5] = "IT. 1"}
    game:GetService("ReplicatedStorage").RemoteEvents.Item:FireServer(unpack(args))
    task.wait(0.3)
    local args = {[1] = "Body"}
    game:GetService("ReplicatedStorage").RemoteEvents.Breakthrough:FireServer(unpack(args))
    task.wait()
end

b:CreateToggle("Auto Farm", function(value)
    _G.Auto_Grind = value
    if value and selectedEnemyType ~= "" then
        task.spawn(function() grindEnemies(selectedEnemyType) end)
    end
end)

b:CreateDropdown("Select Enemy Type", enemyNames, 1, function(selected)
    selectedEnemyType = selected
end)

c:CreateToggle("2 100y/ 1 1ky/ 1 10ky", function(value)
    _G.Auto_brew = value
    if value then
        task.spawn(Brew)
    end
end)
c:CreateToggle("1 10y/ 2 100y/ 1ky", function(value)
    _G.Auto_brew2 = value
    if value then
        task.spawn(Brew2)
    end
end)

d:CreateToggle("Restore Fatigue", function(value)
    _G.Auto_Restore = value
    if value then
        task.spawn(Restore)
    end
end)

d:CreateTextbox("Restore Times", function(text)
    local times = tonumber(text)
    if times then
        _G["Restore_Times"] = times
        print("Set restore times to " .. times)
    else
        print("Invalid restore times")
    end
end)

d:CreateButton("Breaktrhough Training", function(value)
    Breaktrhough_training()
end)
